// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

import "../utils/LoanMetadata.sol";
import "../contracts/ILoanCore.sol";

/**
 * Built off Openzeppelin's ERC721PresetMinterPauserAutoId.
 * 
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract LenderNote is Context, AccessControlEnumerable, ERC721Enumerable, ERC721Burnable {
    using Counters for Counters.Counter;
    using LoanMetadata for LoanMetadata.Status;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    address public loanCore;

    Counters.Counter private _tokenIdTracker;

    string private _baseTokenURI;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(string memory name, string memory symbol, address memory loanCore_) ERC721(name, symbol) {
        require(loanCore_ != address(0), "loanCore address must be defined");

        // TODO: Make sure loanCore has correct interface
        
        // TODO: Better way to handle this than putting the same address in these two separate fields?
        loanCore = loanCore_;
        _setupRole(MINTER_ROLE, loanCore);

        // TODO: This pause might be good for alpha. Should we remove for mainnet?
        _setupRole(PAUSER_ROLE, _msgSender());
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to) public virtual {
        require(hasRole(MINTER_ROLE, _msgSender()), "LenderNote: only LoanCore contract can mint");

        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _mint(to, _tokenIdTracker.current());
        _tokenIdTracker.increment();
    }

    /**
     * @dev Burns `tokenId`. See {ERC721-_burn}.
     *
     * Requirements:
     *
     * - The caller must own `tokenId` or be an approved operator.
     * The loan core contract can only burn a loan that is finished:
     * either repaid or claimed.
     *
     * TODO: Is there any danger to the borrower if a holder of a LenderNote
     * burns their note?
     */
    function burn(uint256 tokenId) public virtual {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721Burnable: caller is not owner nor approved");

        // TODO Check status
        _burn(tokenId);
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     *
     * TODO: Figure out if we should remove the ability to pause.
     */
    function pause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "LenderNote: must have pauser role to pause");
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     *
     * TODO: Figure out if we should remove the ability to pause.
     */
    function unpause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "LenderNote: must have pauser role to unpause");
        _unpause();
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {
        super._beforeTokenTransfer(from, to, tokenId);
        
        // TODO: Check if loan is not active. Should we allow transfers
        // if a loan is not active?
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerable, ERC721, ERC721Enumerable) returns (bool) {
        return super.supportsInterface(interfaceId);
    }

    /**
     * @dev See the current status of the loan this note is attached to.
     *
     * This is a convenienc function that gives a wallet or contract interacting
     * the ability 
     */
    function checkStatus(uint256 tokenId) public view returns (LoanMetadata.Status) {
        require(_exists(tokenId), "LenderNote: loan does not exist");

        return ILoanCore(loanCore).getLoanByLenderNote(tokenId).getStatus();
    }

    /**
     * @dev See the current status of the loan this note is attached to.
     */
    function checkTerms(uint256 tokenId) public view returns (LoanMetadata.Terms) {
        require(_exists(tokenId), "LenderNote: loan does not exist");

        return ILoanCore(loanCore).getLoanByLenderNote(tokenId).getTerms();
    }

    /**
     * @dev Use checkStatus to see if the loan is currently active. Used
     * for safety checks during transfer and burn.
     */
    function isActive(uint256 tokenId) public view returns (bool) {
        require(_exists(tokenId), "LenderNote: loan does not exist");

        LoanMetadata.Status status = ILoanCore(loanCore).getLoanByLenderNote(tokenId).getStatus();

        return status == LoanMetadata.Status.OPEN || status == LoanMetadata.Status.DEFAULT;
    }
}